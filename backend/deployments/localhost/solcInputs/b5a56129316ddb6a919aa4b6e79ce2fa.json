{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/VolunteersNetwork.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../node_modules/@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract VolunteersNetwork is Ownable {\n    struct Volunteer {\n        bool isRegistered;\n        uint personalId; \n        string profilDescription;\n        bool isProposedToJoin;\n        bool hasVotedForANewVolunteer;\n        uint poapsExchanged;\n        address addr;\n    }\n\n    struct Profil {\n        string profilDescription;\n        uint votedDescriptionCount;\n        bool   isElected;\n    } \n\n    struct WriteUp {\n        string record;\n        //hash\n        //uint 8 id\n    }\n\n    struct BigElector{\n        address addressVoter;\n        bool hasVoted;\n        bool votedResult;\n    }\n\n    struct VolunteerTime {\n        uint meetingStartTime;\n        uint meetingEndTime;\n        address volunteerOnMeeting;\n        uint timeOnAMeeting;\n        uint totalTimeOnMeeting;\n    }\n\n    BigElector[3] tempElectors;\n\n    enum WorkflowStatus {\n        RegisteringVolunteers,\n        ProposalsProfilDescription,\n        StartVotingForANewVolunteerSession,\n        EndVotingForANewVolunteerSession,\n        RecordingStartTime,\n        RecordingEndTime\n    }\n\n\n    event VolunteerRegistered(address volunteerAddress, uint id); \n    event VoteEmit(bool); \n    event CurrentWorkflowStatus(WorkflowStatus);\n    event ProfilDescriptionAdded(string);\n    event StartRecordingSession(address volunteerOnMeeting, uint meetingStartTime);\n    event EndRecordingSession(address volunteerOnMeeting, uint meetingEndTime, uint timeOnAMeeting, uint totalTimeOnMeeting);\n\n    mapping(address => Volunteer) public volunteers; \n    mapping(address => Profil) public profiles;\n    mapping(address => VolunteerTime) [] volunteerTimes;\n    \n    address[] volunteersAddr;\n\n    VolunteerTime[] public volunteerSessionTimesArray;\n    WriteUp[] public writeUps;\n    Profil[] public profils;\n\n    uint256 public nextId = 0;\n    uint256 startTime;\n    uint256 endTime;\n    uint256 timeConnected;\n\n    WorkflowStatus public workflowStatus;\n\n\n    constructor() {\n        volunteers[msg.sender].isRegistered = true;\n        volunteers[msg.sender].personalId = 0;\n        workflowStatus = WorkflowStatus.RegisteringVolunteers;\n        \n        emit CurrentWorkflowStatus(workflowStatus); \n    }\n\n    function addVolunteerByOwner(address _addressVolunteer) external onlyOwner{\n        require(nextId < 6, \"Only six volunteers can be added by the owner\");\n        require(workflowStatus == WorkflowStatus.RegisteringVolunteers, \"Current Status is not correct workflow status\");\n        require(!volunteers[_addressVolunteer].isRegistered, \"Volunteer is already registered\");\n        nextId++;\n        volunteers[_addressVolunteer].isRegistered = true;\n        volunteers[_addressVolunteer].personalId = nextId;\n        volunteersAddr.push(_addressVolunteer);\n\n        \n       emit VolunteerRegistered(_addressVolunteer, nextId); \n    }\n\n\n    function proposeSomeone(address _addr) external onlyOwner {\n        require(nextId >= 6);\n        require(!volunteers[_addr].isRegistered, \"vous vous etes deja propose\" );\n        require(!volunteers[_addr].isProposedToJoin, \"vous vous etes deja propose\" );\n        require(workflowStatus == WorkflowStatus.RegisteringVolunteers, \"pas la bonne etape\");\n        volunteers[_addr].isProposedToJoin = true;\n        workflowStatus = WorkflowStatus.ProposalsProfilDescription;\n\n        emit CurrentWorkflowStatus(WorkflowStatus.ProposalsProfilDescription);\n    }\n\n    // function for the futur volunteer\n    function addProfilDescription(string memory _descProfil) external {\n        require(workflowStatus == WorkflowStatus.ProposalsProfilDescription, \"Not correct status\");\n        require(owner()!=msg.sender, \"pas d'owner\");\n        require(volunteers[msg.sender].isProposedToJoin, \"Not registerd to join\");\n        require(keccak256(abi.encode(_descProfil)) != keccak256(abi.encode(\"\")), \"Vous ne pouvez pas ne rien proposer\");\n        \n        profils.push(Profil(_descProfil, 0, false));\n        workflowStatus = WorkflowStatus.ProposalsProfilDescription;\n\n        emit ProfilDescriptionAdded(_descProfil);\n    } \n\n\n    function Select3VotersForNewVolunteer() public onlyOwner returns (uint[3] memory) {\n        require(!volunteers[msg.sender].hasVotedForANewVolunteer, \"pas de double vote\");\n        require(workflowStatus == WorkflowStatus.ProposalsProfilDescription, \"Not correct status\");\n        workflowStatus = WorkflowStatus.StartVotingForANewVolunteerSession;\n\n        uint numVolunteers = volunteersAddr.length;\n        uint[3] memory selectedVolunteers;\n        uint numSelectedVolunteers = 0;\n        uint randomIndex;\n\n        while (numSelectedVolunteers < 3 && numVolunteers > 0) {\n            randomIndex = (uint(keccak256(abi.encodePacked(block.timestamp, msg.sender))) % (numVolunteers-1))+1;\n\n            address selectedAddress = volunteersAddr[randomIndex];\n            if (!volunteers[selectedAddress].hasVotedForANewVolunteer) {\n                // check if index already in selectedVolunteers array\n                bool alreadySelected = false;\n                for (uint i = 0; i < numSelectedVolunteers; i++) {\n                    if (selectedVolunteers[i] == randomIndex) {\n                        alreadySelected = true;\n                        break;\n                    }\n                }\n                if (!alreadySelected) {\n                    selectedVolunteers[numSelectedVolunteers] = randomIndex;\n                    numSelectedVolunteers++;\n                }\n            }\n            numVolunteers--;\n        }\n\n        tempElectors[0].addressVoter = volunteersAddr[selectedVolunteers[0]];\n        tempElectors[1].addressVoter = volunteersAddr[selectedVolunteers[1]];\n        tempElectors[2].addressVoter = volunteersAddr[selectedVolunteers[2]];\n\n        return selectedVolunteers;\n    }\n\n    function isAuthorizedtoVote(address _addressVoter) internal view returns (bool) {\n        bool isAuthorizedVoter = false;\n        for (uint i = 0; i < 3; i++) {\n            if (_addressVoter == tempElectors[i].addressVoter && !tempElectors[i].hasVoted) {\n            isAuthorizedVoter = true;\n            break;\n        }\n    }\n    return isAuthorizedVoter;\n    }\n\n\n    function clearTempElectors() internal {\n    for (uint i = 0; i < tempElectors.length; i++) {\n        tempElectors[i].addressVoter = address(0);\n        tempElectors[i].hasVoted = false;\n        tempElectors[i].votedResult = false;\n        }\n    }\n\n\n    function voteVoluteerByVolunteer(address _addressFuturVolunteer, bool _vote) external {\n        require(profiles[_addressFuturVolunteer].isElected == false, \"The volunteer has already been elected.\");\n        require(volunteers[_addressFuturVolunteer].isProposedToJoin == true, \"The new volunteer does not exist or has not proposed yet.\");\n        require(isAuthorizedtoVote(msg.sender), \"Only authorized voters can vote for the new volunteer.\");\n        require(!volunteers[msg.sender].hasVotedForANewVolunteer, \"Vous ne pouvez pas voter deux fois\");\n\n        volunteers[msg.sender].hasVotedForANewVolunteer = true;\n\n        if (_vote == true) {\n            profiles[_addressFuturVolunteer].votedDescriptionCount++;\n        }\n        else {\n            profiles[_addressFuturVolunteer].votedDescriptionCount = 0;\n        }\n        if (profiles[_addressFuturVolunteer].votedDescriptionCount >= 2){\n            profiles[_addressFuturVolunteer].isElected = true;\n            volunteers[_addressFuturVolunteer].isRegistered = true;\n            volunteers[_addressFuturVolunteer].isProposedToJoin = false;\n            volunteers[_addressFuturVolunteer].personalId = nextId++;\n            volunteersAddr.push(_addressFuturVolunteer);\n            workflowStatus = WorkflowStatus.EndVotingForANewVolunteerSession;\n\n        }\n\n        if (tempElectors[0].hasVoted && tempElectors[1].hasVoted && tempElectors[2].hasVoted ) {\n            workflowStatus = WorkflowStatus.EndVotingForANewVolunteerSession;\n            resetHasVotedForANewVolunteerIfAllVoted();\n            clearTempElectors();\n        }\n    }\n\n    function resetHasVotedForANewVolunteerIfAllVoted() public {\n    \n        uint volunteerWhoDoNotHasVotedCount = 0;\n\n        for (uint i = 0; i < volunteersAddr.length; i++) {\n            if (!volunteers[volunteersAddr[i]].hasVotedForANewVolunteer) {\n                volunteerWhoDoNotHasVotedCount++;\n            }\n        }\n\n        if (volunteerWhoDoNotHasVotedCount < 3) {\n            for (uint i = 0; i < volunteersAddr.length; i++) {\n                volunteers[volunteersAddr[i]].hasVotedForANewVolunteer = false;\n            }\n        }\n    }\n\n\n    //////////////////////States ///////////////////////////////\n    function startRegisteringVolunteers() external onlyOwner {\n        \n        workflowStatus = WorkflowStatus.RegisteringVolunteers;\n\n        emit CurrentWorkflowStatus(WorkflowStatus.RegisteringVolunteers);\n    }\n\n\n    function RecordingStartTimeSession() external onlyOwner {\n        workflowStatus = WorkflowStatus.RecordingStartTime;\n\n        emit CurrentWorkflowStatus(WorkflowStatus.RecordingStartTime);\n    }\n\n    function RecordingEndTimeSession() external onlyOwner {\n        workflowStatus = WorkflowStatus.RecordingEndTime;\n\n        emit CurrentWorkflowStatus(WorkflowStatus.RecordingEndTime);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}